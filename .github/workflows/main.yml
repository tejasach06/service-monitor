name: Build and Release Go Binary

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read Go version from go.mod
        id: goversion
        run: |
          VERSION=$(grep '^go [0-9]\+\.[0-9]\+' go.mod | awk '{print $2}' | cut -d. -f1,2)
          echo "GO_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set dynamic tag
        id: tag
        run: |
          git fetch --tags

          latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)

          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0.0"
          else
            major=$(echo "$latest_tag" | cut -d. -f1 | tr -d 'v')
            minor=$(echo "$latest_tag" | cut -d. -f2)
            patch=$(echo "$latest_tag" | cut -d. -f3)
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          fi

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"
          git push origin "$new_tag"

      - name: Create release directory
        run: mkdir -p release

      - name: Build binary in Docker
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/app" \
            -w "/app" \
            golang:${{ steps.goversion.outputs.GO_VERSION }} \
            sh -c "go env -w GOPROXY=https://proxy.golang.org && \
                   go build -buildvcs=false -ldflags='-s -w' -o release/service-monitor ./cmd/monitor"

      - name: Upload binary to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          files: release/service-monitor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
